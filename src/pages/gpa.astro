---
import MainLayout from "@/layouts/MainLayout.astro";
const currentPath = Astro.url.pathname;
---

<MainLayout title="Settings" description="gju.app settings page">
  <main class="min-h-screen bg-gradient-to-br from-indigo-50 to-blue-50 flex items-center justify-center p-4">
    <div class="bg-white shadow-2xl rounded-2xl p-6 w-full max-w-3xl space-y-6 transition-all duration-300 hover:shadow-3xl">
      <h1 class="text-3xl font-bold text-center text-indigo-800">
        GPA Calculator <span class="text-indigo-600 text-xl">(out of 100)</span>
      </h1>
      
      <form id="gpaForm" class="space-y-6">
        <div id="subjectsContainer" class="space-y-4"></div>

        <div class="flex flex-wrap gap-4 justify-between items-center">
          <div class="flex gap-4">
            <button
              type="button"
              id="addSubject"
              class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors duration-200 flex items-center gap-2"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
              </svg>
              Add Subject
            </button>
          </div>
          
          <div class="flex gap-6">
            <div class="bg-indigo-50 px-4 py-2 rounded-lg">
              <p class="text-sm text-indigo-500">Total Hours</p>
              <p id="totalHours" class="font-bold text-indigo-700">0</p>
            </div>
            <div class="bg-indigo-50 px-4 py-2 rounded-lg">
              <p class="text-sm text-indigo-500">GPA</p>
              <p id="result" class="font-bold text-indigo-700">-</p>
            </div>
          </div>
        </div>

        <button
          type="submit"
          class="w-full bg-gradient-to-r from-indigo-500 to-blue-500 text-white px-6 py-3 rounded-lg hover:from-indigo-600 hover:to-blue-600 transition-all duration-300 shadow-md hover:shadow-lg font-medium"
        >
          Calculate GPA
        </button>
      </form>
    </div>

    <template id="subjectTemplate">
      <div class="flex flex-col sm:flex-row gap-4 items-start sm:items-center p-4 bg-indigo-50 rounded-xl transition-all duration-200 hover:bg-indigo-100 group">
        <input
          type="number"
          class="credit form-input border-2 border-indigo-200 rounded-lg px-4 py-2 w-full sm:w-24 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 transition-all duration-200"
          placeholder="Credits"
          min="0"
          step="1"
        />
        <input
          type="number"
          class="grade form-input border-2 border-indigo-200 rounded-lg px-4 py-2 w-full sm:w-32 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 transition-all duration-200"
          placeholder="Grade (0-100)"
          min="0"
          max="100"
        />
        <button
          type="button"
          class="remove bg-red-500 text-white px-3 py-2 rounded-lg hover:bg-red-600 transition-colors duration-200 opacity-0 group-hover:opacity-100 ml-auto"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    </template>

    <script type="module">
      const container = document.getElementById("subjectsContainer");
      const template = document.getElementById("subjectTemplate");
      const form = document.getElementById("gpaForm");
      const result = document.getElementById("result");
      const totalHoursElement = document.getElementById("totalHours");
      const addButton = document.getElementById("addSubject");

      // Add animation class to new elements
      function animateElement(element) {
        element.classList.add('animate-fade-in');
        setTimeout(() => {
          element.classList.remove('animate-fade-in');
        }, 300);
      }

      function addSubject() {
        const clone = template.content.cloneNode(true);
        const subjectDiv = clone.querySelector('div');
        animateElement(subjectDiv);
        container.appendChild(clone);
        
        // Focus on the first input of the new subject
        const inputs = subjectDiv.querySelectorAll('input');
        if (inputs.length > 0) {
          inputs[0].focus();
        }
        
        // Update total hours when adding a new subject
        updateTotalHours();
      }

      function calculateGPA(e) {
        e.preventDefault();
        const creditInputs = container.querySelectorAll("input.credit");
        const gradeInputs = container.querySelectorAll("input.grade");
        let totalCredits = 0;
        let weightedSum = 0;
        let validCount = 0;

        for (let i = 0; i < creditInputs.length; i++) {
          const credits = parseFloat(creditInputs[i].value);
          const grade = parseFloat(gradeInputs[i].value);
          
          if (!isNaN(credits) && !isNaN(grade)) {
            totalCredits += credits;
            weightedSum += credits * grade;
            validCount++;
          }
        }

        if (validCount === 0) {
          result.textContent = "Please add valid subjects";
          result.classList.add('text-red-500');
          result.classList.remove('text-indigo-700');
          return;
        }

        const gpa = totalCredits ? (weightedSum / totalCredits).toFixed(2) : "0.00";
        result.textContent = gpa;
        result.classList.remove('text-red-500');
        result.classList.add('text-indigo-700');
        
        // Animate the result
        result.classList.add('animate-pulse');
        setTimeout(() => {
          result.classList.remove('animate-pulse');
        }, 500);
      }

      function updateTotalHours() {
        const creditInputs = container.querySelectorAll("input.credit");
        let total = 0;
        
        creditInputs.forEach(input => {
          const value = parseFloat(input.value);
          if (!isNaN(value)) {
            total += value;
          }
        });
        
        totalHoursElement.textContent = total.toFixed(1);
        
        // Animate the update
        totalHoursElement.classList.add('animate-bounce');
        setTimeout(() => {
          totalHoursElement.classList.remove('animate-bounce');
        }, 500);
      }

      container.addEventListener("click", (e) => {
        if (e.target.classList.contains("remove") || e.target.closest(".remove")) {
          const removeBtn = e.target.classList.contains("remove") ? e.target : e.target.closest(".remove");
          const subjectDiv = removeBtn.closest('div');
          
          // Add animation before removal
          subjectDiv.classList.add('animate-fade-out');
          setTimeout(() => {
            subjectDiv.remove();
            updateTotalHours();
          }, 200);
        }
      });

      // Update total hours when credit inputs change
      container.addEventListener("input", (e) => {
        if (e.target.classList.contains("credit")) {
          updateTotalHours();
        }
      });

      addButton.addEventListener("click", addSubject);
      form.addEventListener("submit", calculateGPA);
      
      // Add first subject by default
      addSubject();
    </script>

    <style>
      .animate-fade-in {
        animation: fadeIn 0.3s ease-in-out;
      }
      
      .animate-fade-out {
        animation: fadeOut 0.2s ease-in-out;
      }
      
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      @keyframes fadeOut {
        from { opacity: 1; transform: translateY(0); }
        to { opacity: 0; transform: translateY(10px); }
      }
    </style>
  </main>
</MainLayout>